
"""
* 집합의 처리
- 연결 리스트 이용
- 트리 이용

* 작업
- MAKE-SET(x) : 노드 x만으로 구성된 집합을 만든다
- FIND-SET(x) : 노드 x를 가진 집합을 알아낸다
-> 노드 x가 가리키는 head 반환
- UNION(x,y) : 노드 x를 가진 집합과 노드 y를 가진 집합을 합친다
-> FIND-SET(x), FIND-SET(y) 수행 후 합침

* 연결 리스트 이용
- 두 집합 합치기(B를 A에 합치기)
-> B의 노드 A의 첫번쨰 노드(head) 가르킴 + A의 마지막 tail 노드의 next B의 첫번째 노드의 next 가르킴

* 시간 복잡도: 연결 리스트 이용
- 원소 1개의 집합 n개를 모두 합치는데 걸리는 시간
-> 두 개씩 합치므로 총 logn 번
-> 각 합칠 때마다 최대 n/2번 head 포인터 갱신
-> O(nlogn)

* 트리 이용
- 두 집합 합치기
-> 한 집합의 root가 다른 집합의 root를 가리키도록 수정

* 효율 높이기: 랭크를 이용한 UNION
- 랭크: 자신을 루트로 하는 서브 트리의 깊이
- 랭크가 낮은 집합을 랭크가 높은 집합에 합친다

* 효율 높이기: 경로 압축
- FIND-SET에서 루트에 이르는 경로 상의 모든 노드가 루트를 가리키도록 수정
"""